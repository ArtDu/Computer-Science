artdub@mint ~/c++/test $ date
Пт. нояб. 24 21:19:11 MSK 2017
artdub@mint ~/c++/test gcc main.c -g
artdub@mint ~/c++/test ls
a.out  bin  L9.cbp  L9.layout  main.c  obj
artdub@mint ~/c++/test cat main.c
#include <stdio.h>
#include <stdlib.h>

int main() {
	int n=5;
    int i;
    for (i=5;i>=0;i--)
     printf("%d\n",n/i);
    return 0;
}
artdub@mint ~/c++/test gdb a.out
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) help list
List specified function or line.
With no argument, lists ten more lines after or around previous listing.
"list -" lists the ten lines before a previous ten-line listing.
One argument specifies a line, and ten lines are listed around that line.
Two arguments with comma between specify starting and ending lines to list.
Lines can be specified in these ways:
  LINENUM, to list around that line in current file,
  FILE:LINENUM, to list around that line in that file,
  FUNCTION, to list around beginning of that function,
  FILE:FUNCTION, to distinguish among like-named static functions.
  *ADDRESS, to list around the line containing that address.
With two args, if one is empty, it stands for ten lines away from
the other arg.

By default, when a single location is given, display ten lines.
This can be changed using "set listsize", and the current value
can be shown using "show listsize".
(gdb) list main
1       #include <stdio.h>
2       #include <stdlib.h>
3
4       int main() {
5      		int n=5;
6           int i;
7           for (i=5;i>=0;i--)
8            printf("%d\n",n/i);
9           return 0;
10      }
(gdb) break 8
Breakpoint 1 at 0x40053e: file main.c, line 8.
(gdb) set args main.c
(gdb) run
Starting program: artdub@mint ~/c++/test/a.out main.c

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) print n
$1 = 5
(gdb) print i
$2 = 5
(gdb) ptype i
type = int
(gdb) bt
#0  main () at main.c:8
(gdb) next
1
7           for (i=5;i>=0;i--)
(gdb) next

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) step
__printf (format=0x4005f4 "%d\n") at printf.c:28
28      printf.c: No such file or directory.
(gdb) continue
Continuing.
1

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) print i
$3 = 3
(gdb) continue
Continuing.
1

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) continue
Continuing.
2

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) print i
$4 = 1
(gdb) continue
Continuing.
5

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) print i
$5 = 0
(gdb) set var i=5
(gdb) continue
Continuing.
1

Breakpoint 1, main () at main.c:8
8            printf("%d\n",n/i);
(gdb) print i
$6 = 4
(gdb) set var i=-1
(gdb) continue
Continuing.
-5
[Inferior 1 (process 81) exited normally]
(gdb) quit
