artdub@mint ~/c++/labs/sem_2/kp_9/code $ date
Чт. мая 24 19:31:53 MSK 2018
artdub@mint ~/c++/labs/sem_2/kp_9/code $ ls
build  cmake-build-debug  CMakeLists.txt  input  main.c  Makefile  table.c  table.h  textfile
artdub@mint ~/c++/labs/sem_2/kp_9/code $ cat input 
a Fear no more the heat o' the sun;
b Nor the furious winter's rages,
c Thou thy worldly task hast done,
d Home art gone, and ta'en thy wages;
e Golden lads and girls all must,
f As chimney sweepers come to dust.
fer Fear no more the frown of the great,
ge  Thou art past the tyrant's stroke:
y Care no more to clothe and eat;
yp  To thee the reed is as the oak:
z The sceptre, learning, physic, must
zz  All follow this, and come to dust.
artdub@mint ~/c++/labs/sem_2/kp_9/code $ ./build 

Введите команду (? - справка)
?
~~~~~~~~~~~Список команд~~~~~~~~~~~
t<название>    ввести таблицу
p              печать
s              сортировка
r              реверс
i              перемешать
f              двоичный поиск
?              справка
q              выход
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Введите команду (? - справка)
t input
Таблица считана

Введите команду (? - справка)
p
 —————————————————————————————————————————————
| keys |                  Values              |
 —————————————————————————————————————————————
|     a|     Fear no more the heat o' the sun;|
|     b|       Nor the furious winter's rages,|
|     c|      Thou thy worldly task hast done,|
|     d|   Home art gone, and ta'en thy wages;|
|     e|       Golden lads and girls all must,|
|     f|     As chimney sweepers come to dust.|
|   fer|  Fear no more the frown of the great,|
|    ge|    Thou art past the tyrant's stroke:|
|     y|       Care no more to clothe and eat;|
|    yp|       To thee the reed is as the oak:|
|     z|   The sceptre, learning, physic, must|
|    zz|    All follow this, and come to dust.|
 —————————————————————————————————————————————

Введите команду (? - справка)
i

Введите команду (? - справка)
p
 —————————————————————————————————————————————
| keys |                  Values              |
 —————————————————————————————————————————————
|     e|       Golden lads and girls all must,|
|     y|       Care no more to clothe and eat;|
|   fer|  Fear no more the frown of the great,|
|     a|     Fear no more the heat o' the sun;|
|     f|     As chimney sweepers come to dust.|
|     d|   Home art gone, and ta'en thy wages;|
|     b|       Nor the furious winter's rages,|
|    zz|    All follow this, and come to dust.|
|     c|      Thou thy worldly task hast done,|
|     z|   The sceptre, learning, physic, must|
|    yp|       To thee the reed is as the oak:|
|    ge|    Thou art past the tyrant's stroke:|
 —————————————————————————————————————————————

Введите команду (? - справка)
s
Таблица отсортирована

Введите команду (? - справка)
p
 —————————————————————————————————————————————
| keys |                  Values              |
 —————————————————————————————————————————————
|     a|     Fear no more the heat o' the sun;|
|     b|       Nor the furious winter's rages,|
|     c|      Thou thy worldly task hast done,|
|     d|   Home art gone, and ta'en thy wages;|
|     e|       Golden lads and girls all must,|
|     f|     As chimney sweepers come to dust.|
|   fer|  Fear no more the frown of the great,|
|    ge|    Thou art past the tyrant's stroke:|
|     y|       Care no more to clothe and eat;|
|    yp|       To thee the reed is as the oak:|
|     z|   The sceptre, learning, physic, must|
|    zz|    All follow this, and come to dust.|
 —————————————————————————————————————————————

Введите команду (? - справка)
r

Введите команду (? - справка)
p
 —————————————————————————————————————————————
| keys |                  Values              |
 —————————————————————————————————————————————
|    zz|    All follow this, and come to dust.|
|     z|   The sceptre, learning, physic, must|
|    yp|       To thee the reed is as the oak:|
|     y|       Care no more to clothe and eat;|
|    ge|    Thou art past the tyrant's stroke:|
|   fer|  Fear no more the frown of the great,|
|     f|     As chimney sweepers come to dust.|
|     e|       Golden lads and girls all must,|
|     d|   Home art gone, and ta'en thy wages;|
|     c|      Thou thy worldly task hast done,|
|     b|       Nor the furious winter's rages,|
|     a|     Fear no more the heat o' the sun;|
 —————————————————————————————————————————————

Введите команду (? - справка)
i

Введите команду (? - справка)
s
Таблица отсортирована

Введите команду (? - справка)
p
 —————————————————————————————————————————————
| keys |                  Values              |
 —————————————————————————————————————————————
|     a|     Fear no more the heat o' the sun;|
|     b|       Nor the furious winter's rages,|
|     c|      Thou thy worldly task hast done,|
|     d|   Home art gone, and ta'en thy wages;|
|     e|       Golden lads and girls all must,|
|     f|     As chimney sweepers come to dust.|
|   fer|  Fear no more the frown of the great,|
|    ge|    Thou art past the tyrant's stroke:|
|     y|       Care no more to clothe and eat;|
|    yp|       To thee the reed is as the oak:|
|     z|   The sceptre, learning, physic, must|
|    zz|    All follow this, and come to dust.|
 —————————————————————————————————————————————

Введите команду (? - справка)
f fer
Введите ключ: Найдена строка: Fear no more the frown of the great,

Введите команду (? - справка)
f a
Введите ключ: Найдена строка: Fear no more the heat o' the sun;

Введите команду (? - справка)
f zz
Введите ключ: Найдена строка: All follow this, and come to dust.

Введите команду (? - справка)
t asd
Не удалось считать таблицу

Введите команду (? - справка)
f f
Таблица не считана

Введите команду (? - справка)
Таблица не считана

Введите команду (? - справка)
q
Программа завершена
artdub@mint ~/c++/labs/sem_2/kp_9/code $ 
artdub@mint ~/c++/labs/sem_2/kp_9/code $ cat main.c table.h table.c 
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <string.h>
#include "table.h"
#define valCount 12

int main(int argc, char* argv[]) {
  //system("chcp 65001");

    Table_Element table[valCount];

  Table_Element lookingFor;

  char input = 'q';
  int working = 1;
    char table_name[100];
    int file_in = 0;


  do {
    printf("\nВведите команду (? - справка)\n");
    scanf(" %c", &input);
    switch (input) {
      case 't':
          scanf("%s",table_name);

                if (initDictionary(table, valCount, argv[0], table_name)) {
                    printf("Не удалось считать таблицу\n");
                    file_in = 0;
                    break;
                }
                else {
                    printf("Таблица считана\n");
                    file_in = 1;
                }
                break;
      case 'p':
          if(file_in) {
                    printDictionary(table, valCount);
                    printf("\n");
          }
        else {
              printf("Таблица не считана\n");
          }
        break;
      case 's':
          if (file_in) {
                    if (isSorted(table, valCount)) {
                        printf("Ошибка. Таблица уже отсортирована\n");
                    } else {
                        InsertSort(table, valCount);
                        printf("Таблица отсортирована\n");
                    }
                }
                else {
                    printf("Таблица не считана\n");
                }
        break;
      case 'r':
          if(file_in) {
                    reverse(table,  valCount);
                }
                else {
                    printf("Таблица не считана\n");
                }
        break;
      case 'i':
          if(file_in) {
                    scramble(table,  valCount);
                }
                else {
                    printf("Таблица не считана\n");
                }
        break;
      case 'f':
          if(file_in) {
                    if (!isSorted(table, valCount))
                        printf("Ошибка. Таблица не отсортирована\n");
                    else {
                        printf("Введите ключ: ");
                        scanf("%s", &lookingFor.key);
                        int foundInd = binSearch(table, valCount+1, lookingFor);

                        if (foundInd > -1)
                            printf("Найдена строка: %s\n", table[foundInd].val);
                        else
                            printf("Строка с таким ключом не найдена\n");
                    }
          }
                else {
                    printf("Таблица не считана\n");
                }

        break;


      case '?':
        printf("~~~~~~~~~~~Список команд~~~~~~~~~~~\n");
                    printf("t<название>    ввести таблицу\n");
          printf("p              печать\n");
          printf("s              сортировка\n");
          printf("r              реверс\n");
          printf("i              перемешать\n");
          printf("f              двоичный поиск\n");
          printf("?              справка\n");
          printf("q              выход\n");
        printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
        break;
      case 'q':
        working = 0;
        printf("Программа завершена\n");
        break;
      default:
        printf("Неизвестная команда\n");
        break;
    }
  } while (working);

  return 0;
}
/*
 * table.h
 *
 *  Created on: May 29, 2017
 *      Author: mint
 */

#ifndef TABLE_H_
#define TABLE_H_
typedef struct _key{
  //int link;
  char key[10];
  char val[100];
}Table_Element;

/*
 * dependencies functions
 */
void swapRows(Table_Element table[],const int a, const int b);
int Compare(const char k1[10], const char k2[10]);
int cmp(const char k1[10], const char k2[10]);
int isEqualKeys(const char k1[10], const char k2[10]);


//init
int initDictionary(Table_Element table[], const int size, char dirName[1000], char fileName[100]);
//print
void printDictionary(Table_Element table[], const int size);
//sort
void InsertSort(Table_Element table[], const int size);
//reverse
void reverse(Table_Element table[], const int size);
//isSorted
int isSorted(const Table_Element table[], const int size);
//shuffle
void scramble(Table_Element table[], const int size);
//binSearch
int binSearch(const Table_Element table[],  const int size, const Table_Element target);


#endif /* TABLE_H_ */
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <string.h>
//#include <direct.h>
#include "table.h"

/*
 * additional functions
*/
int randomAB(const int a, const int b) {
    return a + rand() % (b - a + 1);
}
void swap(Table_Element a[],int i,int j){
    Table_Element k;
    strcpy(k.key,a[i].key);
    strcpy(k.val,a[i].val);
    //k.link = a[i].link;

    a[i] = a[j];
    a[j] = k;

}
/*
 * additional functions(table.h)
*/
void swapRows(Table_Element table[], const int a, const int b) {
    Table_Element tmp_el;
    tmp_el = table[a];
    table[a] = table[b];
    table[b] = tmp_el;
}
int Compare(const char k1[10], const char k2[10]) {
    //возращает 1 если ключ 1 строго больше  2
    if ( (strcmp(k1,k2)>=0) )
        return 1;
    return 0;

}
int cmp(const char k1[10], const char k2[10]) {
    if ( (strcmp(k1,k2)>=0) )
        return 1;
    return 0;
}
int isEqualKeys(const char k1[10], const char k2[10]) {
    return (strcmp(k1,k2)==0) && strlen(k1)==strlen(k2);
}

//init
void getRow(FILE *stream, char *str, const int size) {
  int cnt = 0, ch;

  while ((ch = getc(stream)) != '\n' && cnt < size - 1)
    str[cnt++] = ch;

  str[cnt] = '\0';
}
int initDictionary(Table_Element table[], const int size, char dirName[1000], char fileName[100]) {

    char final_dir_name[1000];
    final_dir_name[0]='\0';

    for (int j = strlen(dirName)-1; j >= 0 ; --j) {
        if(dirName[j]=='/')
        {
            strncat(final_dir_name,dirName,j+1);
            break;
        }
    }
    strcat(final_dir_name,fileName);
    //printf("%s\n", final_dir_name);

    FILE *file;
    file = fopen(final_dir_name, "r");
  if (file == NULL)
    return -1;

  int i = 0;
  while (i < size && fscanf(file, " %s ", &table[i].key) == 1) {

    //table[i].link=i;
    getRow(file, table[i].val, sizeof(table[i].val));
    i++;
  }
  fclose(file);
  return 0;
}

//print
void printDictionary(Table_Element table[], const int size) { //t input p
    printf(" ");
    for(long long i = 0; i < 45; ++i) {
        printf("—");
    }
    printf("\n");
    printf("| keys |                  Values              |\n");
    printf(" ");
    for(long long i = 0; i < 45; ++i) {
        printf("—");
    }
    printf("\n");
    for (int i = 0; i < size; i++) {
        printf("|%6s| %37s|\n", table[i].key, table[i].val);
    }
    printf(" ");
    for(long long i = 0; i < 45; ++i) {
        printf("—");
    }
}

//insert
void InsertSort(Table_Element table[], const int size) {

    for (int i=0; i<size; ++i){
        char temp[10];
        strcpy(temp,table[i].key);
        int left=0;
        int right=i;
        while (left<right){
            int middle=(left+right)/2;
            if  (strcmp(temp,table[middle].key)>=0)
                left=middle+1;
            else
                right=middle;
        }
        for (int j=i;j>left;--j){
            swap(table,j-1,j);
        }
    }

}

//reverse
void reverse(Table_Element table[],  const int size) {
    int i, j;

    for (i = 0, j = size - 1; i < j; i++, j--)
        swapRows(table,  i, j);
}

//isSorted
int isSorted(const Table_Element table[], const int size) {
    for (int i = 0; i < size - 1; i++)
        if (!(Compare(table[i + 1].key, table[i].key) ))
            return 0;
    return 1;
}

//Shuffle
void scramble(Table_Element table[], const int size) {
    for (int z = 0; z < size; z++)
        swapRows(table,  randomAB(0, size - 1), z);

}

//binSearch
int binSearch(const Table_Element table[],  const int size, const Table_Element target) {
    int L = 0;
    int R = size - 1;
    int mid;
    while (L < R) {
        mid = (R + L) / 2;
        if (isEqualKeys(table[mid].key, target.key))
            return mid;
        else if (cmp(target.key, table[mid].key))
            L = mid + 1;
        else
            R = mid;
    }

    if (isEqualKeys(table[mid].key, target.key))
        return R;

    return -1;
}


artdub@mint ~/c++/labs/sem_2/kp_9/code $ 