artdub@mint ~/c++/labs/sem_2/kp_8/code $ ls
build  cmake-build-debug  CMakeLists.txt  lis.c  lis.h  main.c  Makefile
artdub@mint ~/c++/labs/sem_2/kp_8/code $ date
Чт. мая 24 19:00:28 MSK 2018
artdub@mint ~/c++/labs/sem_2/kp_8/code $ ./
build              cmake-build-debug/ .idea/             
artdub@mint ~/c++/labs/sem_2/kp_8/code $ ./build 
Введите команду (? - справка)
?
~~~~~~~~~~~Список команд~~~~~~~~~~~
a <номер> <элемент>        добавить элемент
d <номер>                  удалить элемент
p                          вывести список
l                          вывести длинну списка
t <левая> <правая границы> выполнить задание
?                          справка
q                          выход
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Введите команду (? - справка)
a 
1 asd
Введите команду (? - справка)
a 
1 b
Введите команду (? - справка)
a 
1 c
Введите команду (? - справка)
a 
1 d
Введите команду (? - справка)
l
4
Введите команду (? - справка)
p
Index:	1 2 3 4 
Array:	d c b asd 
Введите команду (? - справка)
d  
4
Введите команду (? - справка)

p
Index:	1 2 3 
Array:	d c b 
Введите команду (? - справка)
a 4 a
Введите команду (? - справка)
p
Index:	1 2 3 4 
Array:	d c b a 
Введите команду (? - справка)
t b c
Введите команду (? - справка)
p
Index:	1 2 
Array:	d a 
Введите команду (? - справка)
t a z
Введите команду (? - справка)
p
Список пуст
Введите команду (? - справка)
q
Программа завершена
artdub@mint ~/c++/labs/sem_2/kp_8/code $ 
artdub@mint ~/c++/labs/sem_2/kp_8/code $ cat main.c lis.h lis.c 
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include "lis.h"

int main(void) {

	char input = 'q';
	int working = 1;
	int pos;
	char val_1[100], val_2[100];
	Iterator it,last;
	List_type tmp_list_type;
	List a;

	List_create(&a);

	do {
		printf("Введите команду (? - справка)\n");
		scanf(" %c", &input);
		switch (input) {
		case '?':
		case 'h':
			printf("~~~~~~~~~~~Список команд~~~~~~~~~~~\n");
			printf("a <номер> <элемент>        добавить элемент\n");
			printf("d <номер>                  удалить элемент\n");
			printf("p                          вывести список\n");
            printf("l                          вывести длинну списка\n");
			//printf("e                          удалить список\n");
			printf("t <левая> <правая границы> выполнить задание\n");
			printf("?                          справка\n");
			printf("q                          выход\n");
			printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
			break;
		case 'a':
            scanf("%d", &(pos));
            if(pos==1)pos=1; 
			else if(pos%a.size==1)pos=a.size+1; 
			else if(pos%a.size==0)pos=a.size; 
			else pos%=a.size; 

            scanf("%s", tmp_list_type.lt);


            it = List_top_front(&a);
            last =  List_top_back(&a);
            while (pos-1 > 0 && !it_List_equal(&it, &last)) {
                it_List_next(&it);
                pos--;
            }
            //если ушло в терминальный, т.е больше списка, то элемент станет последним

            List_insert(&a, &it, tmp_list_type);

			break;
        case 'l':
            printf("%d\n", List_Size(&a));
            break;
        case 'd':
            if (List_empty(&a)) {
                printf("Список пуст\n");
                break;
            }
            scanf("%d", &(pos));
            if(pos >a.size && a.size!=0) {
                if(pos%a.size == 0)
                    pos = a.size;
                else
                    pos = pos%(a.size);
            }
            it = List_top_front(&a);
            last =  List_top_back(&a);
            while (pos-1 > 0 && !it_List_equal(&it, &last)) {
                it_List_next(&it);
                pos--;
            }
            if (it_List_equal(&it, &last))
                it_List_prev(&it);
            //если ушло в терминальный, т.е то будет удален последний
            List_delete(&a, &it);
            break;

		case 'p':
			if (!List_empty(&a)) {
				List_print(&a);
				printf("\n");
			} else {
				printf("Список пуст\n");
			}
			break;
		/*case 'e':
			List_destroy(&a);
			List_create(&a);
			break;*/
		case 't':
			if (!List_empty(&a)) {

                scanf("%s", val_1);
                scanf("%s", val_2);
                List_task(&a, val_1, val_2);
			} else {
				printf("Список пуст\n");
			}
			break;



		case 'q':
			/*dequeDestroy(&a);*/
			printf("Программа завершена\n");
			working = 0;
			break;
		default:
			printf("Неизвестная команда\n");
			break;

		}
	} while (working);

	return 0;
}

#ifndef LIS_H
#define LIS_H
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

#define POOL_SIZE 100

typedef struct _data_type {
	char lt[100];
} List_type;

typedef struct _Item {
	struct _Item* prev;
	struct _Item* next;
	List_type data;
} Item;

typedef struct {
	Item* node;
} Iterator;

typedef struct _List {
	Item* head;
	int size;
} List;

//functions for work with iterators
bool it_List_equal(const Iterator* lhs, const Iterator* rhs);
Iterator it_List_next(Iterator* i);
Iterator it_List_prev(Iterator* i);
List_type it_List_fetch(Iterator* i);
void it_List_store(Iterator* i, List_type t);

//functions for work with List type
void List_create(List *deq);
Iterator List_top_front(const List* list);
Iterator List_top_back(const List* list);
Iterator List_insert(List* list, Iterator* i, List_type t);
Iterator List_delete(List* list, Iterator* i);
//void List_destroy(List* list);
bool List_empty(const List* list);
int List_Size(const List* list);

/*
Not standart functions
*/
void List_print(List *list);
void List_task(List* list, char lbord[100], char rbord[100]);
#endif
#include "lis.h"


//functions for work with iterators
bool it_List_equal(const Iterator* lhs, const Iterator* rhs) {
	return lhs->node == rhs->node;
}

Iterator it_List_next(Iterator* i) {
	i->node = i->node->next;
}
Iterator it_List_prev(Iterator* i) {
	i->node = i->node->prev;
}
List_type it_List_fetch(Iterator* i){
	return i->node->data;
}
void it_List_store(Iterator* i, List_type t) {
	i->node->data = t;
}

//functions for work with List type
void List_create(List* list) {

	list->head = malloc(sizeof(Item));
	list->head->next = list->head->prev = list->head;
	list->size = 0;
}

Iterator List_top_front(const List* list) {
	Iterator res = {list->head->next};
    return res;
}

Iterator List_top_back(const List* list) {
	Iterator res = {list->head};
	return res;
}

Iterator List_insert(List* list, Iterator* i, List_type t) {
	Iterator res = { malloc(sizeof(Item)) };
	if(!res.node) {
		return List_top_back(list);
	}

	res.node->data = t;
	res.node->next = i->node;
	res.node->prev = i->node->prev;
	res.node->prev->next = res.node;
	i->node->prev = res.node;
	list->size++;
	return res;
}

Iterator List_delete(List* list, Iterator* i) {
	Iterator res = List_top_back(list);
	if(it_List_equal(i,&res)) {
		return res;
	}
	res.node = i->node->next;
	res.node->prev = i->node->prev;
	i->node->prev->next = res.node;
	list->size--;
	//free array pnt
	free(i->node);
	i->node = 0;
	return res;
}

bool List_empty(const List* list) {
	Iterator fst = List_top_front(list);
	Iterator snd = List_top_back(list);
	return it_List_equal(&fst,&snd);
}

int List_Size(const List* list) {
	return list->size;
}



//not standart functions
void List_print(List *list) {

	List_type tmp_list_type;
	Iterator it, last = List_top_back(list);
	printf("Index:\t");
    for (int i = 1; i <= List_Size(list); ++i) {
        printf("%d ", i);
    }
	printf("\nArray:\t");
	for (it = List_top_front(list); !it_List_equal(&it,&last) ;  it_List_next(&it)) {

		tmp_list_type = it_List_fetch(&it);

		printf("%s ", tmp_list_type.lt);


	}

}

void List_task(List* list, char lbord[100], char rbord[100]) {
    List_type tmp_list_type;
    Iterator it, last = List_top_back(list);
    for (it = List_top_front(list); !it_List_equal(&it,&last) ;  ) {


        tmp_list_type = it_List_fetch(&it);
        if( strcmp(lbord,tmp_list_type.lt)<=0 && strcmp(rbord,tmp_list_type.lt)>=0) {

            it = List_delete(list, &it);
        }
        else {
            it_List_next(&it);
        }


    }
}


artdub@mint ~/c++/labs/sem_2/kp_8/code $ 

